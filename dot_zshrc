# VARIABLES
zsh_folder="$HOME/.zsh"

# HISTORY
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt share_history appendhistory inc_append_history hist_ignore_space hist_ignore_all_dups hist_reduce_blanks extended_history
HISTIGNORE="&:[ ]*:exit:ls:bg:fg:history:clear"
HISTORY_IGNORE="exit|ls|bg|fg|history|clear|ll"
HISTCONTROL=ignoreboth

# OPTIONS
setopt autocd extendedglob notify prompt_subst complete_in_word always_to_end auto_pushd long_list_jobs complete_aliases chase_links
unsetopt beep nomatch
bindkey -e

# COMPLETION STYLE

# Use menu select
#zstyle ':completion:*' menu select
# General style
#zstyle ':completion:*' verbose true
#zstyle ':completion:*' rehash true
#zstyle ':completion:*' list-dirs-first true
#zstyle ':completion:*:corrections' format '%U%F{green}%d (errors: %e)%f%u'
#zstyle ':completion:*:warnings' format '%F{202}%BSorry, no matches for: %F{214}%d%b'
# Show group names
#zstyle ':completion:*' group-name ''
#zstyle ':completion:*:matches' group 'yes'
#zstyle ':completion:*:options' description 'yes'
#zstyle ':completion:*:options' auto-description '%d'
#zstyle ':completion:*:descriptions' format "%F{31}%d:%f"
# Coloring
#zstyle -e ':completion:*:default' list-colors 'reply=("${PREFIX:+=(#bi)($PREFIX:t)(?)*==33=}:${(s.:.)LS_COLORS}:ma=33;4")'
#zstyle ':completion:*:options:descriptions' list-colors '=*=33'
#zstyle ':completion:*:*:*:*:hosts' list-colors '=*=31'
#zstyle ':completion:*:*:*:*:users' list-colors '=*=32'
# LS_COLORS
eval $(dircolors -b $zsh_folder/LS_COLORS)
# Git don't show remote branches
#zstyle ':completion::complete:git-checkout:argument-rest:headrefs' command "git for-each-ref --format='%(refname)' refs/heads 2>/dev/null"
# This speeds up pasting w/ autosuggest
# https://github.com/zsh-users/zsh-autosuggestions/issues/238
pasteinit() {
  OLD_SELF_INSERT=${${(s.:.)widgets[self-insert]}[2,3]}
  zle -N self-insert url-quote-magic # I wonder if you'd need `.url-quote-magic`?
}
pastefinish() {
  zle -N self-insert $OLD_SELF_INSERT
}
zstyle :bracketed-paste-magic paste-init pasteinit
zstyle :bracketed-paste-magic paste-finish pastefinish


# FZF-tab
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# switch group using `,` and `.`
zstyle ':fzf-tab:*' switch-group left right 

# preview style
FZF_DEFAULT_OPTS='--reverse --border=horizontal --prompt=" " --pointer="•" --marker="❌" --height=100%'
FZF_CTRL_T_OPTS="$FZF_DEFAULT_OPTS --preview 'less {}' --preview-window right,50%,border-left"
export BAT_STYLE="numbers"
zstyle ':fzf-tab:*' fzf-flags --reverse --border=horizontal --prompt=" "  --pointer="•" --marker="❌" --preview-window right,50%,border-left --height=100%

# give a preview of commandline arguments when completing `kill`
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-preview "[[ $group == '[process ID]' ]] && ps --pid=$word -o cmd --no-headers -w -w'"
zstyle ':fzf-tab:complete:(kill|ps):argument-rest' fzf-flags --preview-window=down:3:wrap

# file content previews
zstyle ':fzf-tab:complete:(-command-|ls|cat|ll):*' fzf-preview 'less ${(Q)realpath}'
export LESSOPEN='|~/.lessfilter %s'

# systemd unit status
zstyle ':fzf-tab:complete:systemctl-*:*' fzf-preview 'SYSTEMD_COLORS=1 systemctl status $word'

# env variables
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'


# PROMT THEME
eval "$(starship init zsh)"

# Bundles
# Before sourcing
plugins=(fzf nvm command-not-found sudo man colored-man-pages colorize dirhistory copybuffer magic-enter cp dotenv)
#export NVM_LAZY=1
export NVM_AUTOLOAD=1

source $zsh_folder/bundle.sh

# After sourcing
ZSH="$(antibody home)/https-COLON--SLASH--SLASH-github.com-SLASH-robbyrussell-SLASH-oh-my-zsh"
DISABLE_AUTO_UPDATE=true
DISABLE_UPDATE_PROMPT=true
ZSH_COMPDUMP=$HOME/.zcompdump
ZSH_COLORIZE_STYLE=monokai
MAGIC_ENTER_GIT_COMMAND='g s'
MAGIC_ENTER_OTHER_COMMAND='ll .'
export ZSH_PLUGINS_ALIAS_TIPS_EXCLUDES="_ ll g oc"

# Set up Ruby
# eval "$(command rbenv init -)"
# export PATH="$HOME/.gem/ruby/2.6.0/bin:$PATH"

# Set NPM global dir
export PATH="$HOME/.npm-global/bin:$PATH"

# Set up Python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$HOME/.local/bin:$PATH"
_pipenv() {
  eval $(env COMMANDLINE="${words[1,$CURRENT]}" _PIPENV_COMPLETE=complete-zsh  pipenv)
}
_pip_completion() {
  local words cword
  read -Ac words
  read -cn cword
  reply=( $( COMP_WORDS="$words[*]" \
             COMP_CWORD=$(( cword-1 )) \
             PIP_AUTO_COMPLETE=1 $words[1] ) )
}
if [ $commands[pyenv] ]; then
  pyenv() {
    unfunction "$0"
    eval "$(pyenv init -)"
    $0 "$@"
  }
fi

export PATH="$HOME/.poetry/bin:$PATH"

# Set up Go
export GOPATH="$HOME/.go"
export PATH="${GOPATH//://bin:}/bin:$PATH"

# Set editor
export VISUAL=vim
export EDITOR="$VISUAL"

# Set krew plugins
export PATH="$PATH:$HOME/.krew/bin"

# Set sudo prompt
export SUDO_PROMPT="💬🔑 "

# Set Chromium for Flutter
export CHROME_EXECUTABLE=chromium

# Init additional completions
fpath+="$zsh_folder/zfunc"
compdef _pipenv pipenv
compdef _gh gh
compctl -K _pip_completion pip


# COMPLETION
# Dkms
#source /usr/share/bash-completion/completions/dkms

# Git aliased completion
compdef g='git'

complete -C '~/.local/bin/aws_completer' aws

# KEYBINDINGS
bindkey "^[[3;5~"          kill-word
bindkey "\b"               backward-kill-word
bindkey "$terminfo[kich1]" overwrite-mode
bindkey '^[[Z'             autosuggest-accept

# ALIASES
# The Fuck
#eval $(thefuck --alias)
# Show memory waitong to write to disk
alias dirty="watch grep -e Dirty: -e Writeback: /proc/meminfo"

alias be="bundle exec"
alias ber="be rake"
alias bers="be rails s"
alias berc="be rails c"
alias psql_root="psql -U root -d postgres"
alias watch="watch -d -c"
alias i="lximage-qt"
alias mplayer=mpv
alias g=git
alias ocu="oc config use-context"
alias occl="oc config set-cluster"
alias ocr="oc config set-credentials"
alias ocg="oc get"
alias ocgy="oc get -o yaml"
alias ocd="oc describe"
alias ocs="oc status"
alias ocdel="oc delete"
alias ocl="oc logs"
alias occo="chromium \`oc whoami --show-console\`"
alias t="PIPENV_DONT_LOAD_ENV=1 pipenv run pytest --pylama ."
alias dotenv="set -a; source ./.env; set +a;"
alias c="code ."
alias v="code ."
alias gh="PAGER=cat gh"

# FUNCTIONS

# Private functions
source $zsh_folder/private.sh

# Merge PDFs
function pdfmerge {
    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/default -dNOPAUSE -dQUIET -dBATCH -dDetectDuplicateImages -dCompressFonts=true -r150 -sOutputFile=$@
}

# Restart KDE Plasma
function plasma-restart {
    echo "Restarting plasma..."
    killall plasmashell
    kstart5 plasmashell &> /dev/null
    echo "Restarting krunner..."
    killall krunner
    kstart5 krunner &> /dev/null
    echo "Done"
}

# Rsync backup
function backup {
    params=""
    if [ "$1" == "-r" ]; then
        params="--remove-source-files"
        shift
    fi

    rsync -avh --stats --progress --partial $params $@
}

# Charge Thinkpad to full
function charge {
    if [ "$1" == "-f" ]; then
        sudo tlp fullcharge BAT0
        sudo tlp fullcharge BAT1
    else
        sudo tlp setcharge BAT0
        sudo tlp setcharge BAT1
    fi
}

# Create gif from video
function gif {
    palette="/tmp/gif-palette-$RANDOM.png"
    ffmpeg -v "warning" -i "$1" -vf "fps=10,palettegen=stats_mode=full" -y "$palette"
    ffmpeg -v "warning" -i "$1" -i "$palette" -lavfi "fps=10 [x]; [x][1:v] paletteuse=dither=sierra2_4a" -y "${1%.*}.gif"
}


# Export payroll
function export_payroll {
    year="2020"
    pushd ~/Vaults/Payroll
    mv ~/Downloads/*_$year\_$1_970-CZE.ZIP Archives/
    pass=$(/bin/cat payroll.txt | tr -d '\n')
    unzip -P $pass -j Archives/*_$year\_$1_970-CZE.ZIP -d Extracted/  *_$year\_$1_970-CZE-CZE.PDF
    popd
}

# Wrap up different monitoring tools
function monitor {
    case "$1" in
        "cpu") s-tui;;
        "gpu") sudo intel_gpu_top;;
        "ps") htop;;
        "all") glances;;
        "dirty") dirty;;
        "mem") free -tm;;
        *) echo "Not a valid resource";;
    esac;
}

function is-group-installed {
    for i in `yay -Sg $1 | cut -f2 -d ' '`; do
        printf %-50s "$i";
        x="$(yay -Qs \"^$i$\")";
        [ $? -eq 1 ] || echo -n "not ";
        echo "installed";
    done
}

function toggle_trackpoint {
    current_status=`xinput list-props "TPPS/2 IBM TrackPoint" | awk '/Device Enabled/{print $4}'`
    xinput set-prop "TPPS/2 IBM TrackPoint" "Device Enabled" `[ $current_status == "1" ] && echo 0 || echo 1`
}

function src {
    antibody update
    antibody bundle < $zsh_folder/bundle.txt > $zsh_folder/bundle.sh

    autoload -U compinit zrecompile
    compinit -i -d $ZSH_COMPDUMP

    for f in ~/.zshrc $ZSH_COMPDUMP; do
        zrecompile -p $f && command rm -f $f.zwc.old
    done

    # Use $SHELL if available; remove leading dash if login shell
    [[ -n "$SHELL" ]] && exec ${SHELL#-} || exec zsh
}

function magnet {
    trackers=`echo "$3" | paste -s -d "~" | sed 's/~~/\&tr=/g'`
    echo "magnet:?xt=urn:btih:$1&dn=$2&tr=$trackers"
}


function oct {
    context=`oc config current-context`
    ldap_creds=`kwalletcli -f openshift -e "$context"`
    base_url=`oc config view | ymlx "this.clusters.filter(c => c.name == \"$context\").map(c => c.cluster.server)[0]" | tr -d "'"`
    oauth_url=`curl -sk "$base_url/.well-known/oauth-authorization-server" | fx .authorization_endpoint`
    token=`curl -u "$ldap_creds" -ik "$oauth_url?client_id=openshift-challenging-client&response_type=token" | grep -oP "access_token=\K[^&]*"`
    ocr $context --token=$token
}

function gpg_secret {
    secret=$1
    namespace=$2
    gpg_key=$3
    ocg secrets/$secret -n $namespace -o json | jq '.data | map_values(@base64d)' | gpg --armor --encrypt -o $secret.gpg.txt -r $gpg_key
}

function ansible-decrypt-from-clipboard {
  xclip -o | ansible-vault decrypt -
}

function datetime {
    date +"%H:%M:%S"
}

alias peribolos-check="podman run -it -v .:/mnt:Z --entrypoint /peribolos gcr.io/k8s-prow/peribolos:latest --config-path /mnt/github-config.yaml --github-token-path /mnt/token --min-admins=2 --maximum-removal-delta=0.15 --require-self=true --fix-org --fix-org-members --fix-repos --fix-teams --fix-team-members --fix-team-repos --allow-repo-archival"
function peribolos-dump {
    podman run -it -v .:/mnt:Z --entrypoint /peribolos gcr.io/k8s-prow/peribolos:latest --dump $1 --github-token-path /mnt/token | tee ./github-config.yaml
}

function work {
    kstart5 --maximize slack
    kstart5 chromium --profile-directory="Profile 1"
    kstart5 spotify 
}
