[user]
  email = {{ .email }}
  name = {{ .name }}
  signingkey = {{ .keyid }}

[init]
  defaultBranch = main

[push]
  default = current
  rebase = true
  followTags = true

[core]
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

[pull]
  rebase = true

[rebase]
  autoSquash = true

[credential]
  helper = cache

[color]
  interactive = true
  branch = true
  status = true

[commit]
  gpgsign = true

[pager]
  branch = false
  tag = false

[diff "nbdiff"]
  command = git-nbdiffdriver webdiff

[alias]
  root = rev-parse --show-toplevel
  default-branch = "!f() { basename $(git rev-parse --abbrev-ref origin/HEAD); }; f"
  set-main = "!f() { git symbolic-ref origin/HEAD refs/remotes/origin/$1; }; f"

  out = log --branches --not --remotes
  in = pull --dry-run

  co = checkout
  coc = checkout .
  cob = checkout -b
  cobf = "!f() { git brd $1; git cob $1; }; f"
  col = checkout -
  com = "!f() { git checkout $(git default-branch); }; f"

  c = commit -s -m
  cf = "!f() { git commit --fixup=$1; }; f"
  ca = commit -s -a -m
  cm = commit -s --amend --no-edit
  cam = commit -s --amend -a --no-edit
  cma = cam

  cl = "!f() { git clone $1; USERNAME=$(echo \"$1\" | grep -oP '(?<=:)(.*)(?=/)' ); FOLDER=$(echo \"$1\" | grep -oP '(?<=/)(.*)(?=\\.)'); cd $FOLDER; git rema upstream ${1/$USERNAME/$2}; }; f"

  cldf = clean -df

  res = reset
  resa = reset HEAD
  resh = "!f() { git stash && git reset --hard $@; }; f"
  undo = reset HEAD^1
  unstage = resa

  tags = "!f() { echo "Local tags:"; git tag -l; echo "Upstream tags:"; git ls-remote --tags upstream | cut -f2 | cut -c12-; }; f"

  d = diff
  ds = diff --staged

  s = status --short --branch

  sh = show --color
  shw = show --color --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  shf = show --color -C --stat

  f = fetch
  fu = fetch upstream
  fum =  "!f() { git fu $(git default-branch); }; f"
  fa = fetch --all
  fo = fetch origin

  pr = "!f() { git fu pull/$1/head:pr/$1; git co pr/$1; }; f"
  p = push
  pf = push -f
  pu = pull

  b = branch

  aa = add --all -v
  aaf = add --all -f -v
  ap = add -p -v
  a = add -u -v

  lg = "log --graph --full-history --all --pretty=format:'%C(#ffaa00)%h%Creset —— %C(magenta)%G? %C(bold blue)%an%Creset: %s %C(green)%ar%Creset %C(red)%d%Creset' --abbrev-commit --date=relative"
  cleanup = "!f() { git branch --merged | grep -v \"^\\*\\\\|main\" | xargs -r -I % sh -c \"git branch -d %; git push origin --delete %\"; }; f"
  update = "!git fum && HUSKY=0 git com && git rb upstream/$(git default-branch) && git p && git col && git rbm"

  # cotc = !git sttc | xargs git checkout
  # como = !git stmo | xargs git checkout

  # d = diff --color
  # dw = diff --color --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  # du = !git d `git upstream`
  # ds = !git d --staged
  # dsf = !git d --staged --stat
  # dsw = !git d --staged --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  # dsf = !git d --staged -C --stat
  # df = !git d -C --stat
  # dc = "!f() { HASH=$1; shift 1; git diff --cc $HASH $HASH^1 $HASH^2 $@; }; f"

  # lp = log -m --color -p
  # lf = log -m --color -C --stat
  # lgu = !git lg `git upstream`
  # lg2 = !source ~/.githelpers && pretty_git_log
  # lgp = !git lg -p
  # lgpw = !git lg -p --color-words='[^[:space:]]|([[:alnum:]]|UTF_8_GUARD)+'
  # lgf = !git lg -C --stat
  # l = log -m --simplify-merges --color --pretty=format:'%Cred%h%Creset %s %Cgreen(%cr) %Cblue%an <%ae>%Creset' --abbrev-commit --date=relative
  # lc = "!f() { git log $* | grep '^commit ' | cut -f 2 -d ' '; }; f"

  # lgu = !git lg --no-merges `git upstream`
  # lgup = !git lg --no-merges -p `git upstream`

  # ps = push
  # psu = push -u
  # psn = "!f() { git ps $1 `git brc`; }; f"
  # psnf = "!f() { git psf $1 `git brc`; }; f"
  # psfun = "!f() { git psu -f $1 `git brc`; }; f"
  # psun = "!f() { git psu $1 `git brc`; }; f"
  # pso = push origin
  # psoun = !git psu origin `git brc`
  # psf = push -f
  # psuf = push -uf
  # pssm = push --recurse-submodules=on-demand
  # psremoveallbranches = "!f() { git push $1 `git brar $1 | grep -v master | xargs -I {} echo :{}`; }; f"

  resolve-unmerged = !git add `git unmerged`
  add-untracked = !git add `git untracked`
  as = !git diff -w --no-color | git apply --cached
  rs = !(git resa && git as && git co . && git resa) &>/dev/null

  rmf = rm -rf

  unmerged = !git ls-files --unmerged | cut -f2 | uniq
  untracked = ls-files --other --exclude-standard
  staged = ls-files --staged
  modified = ls-files --modified
  deleted = ls-files --deleted
  gitignored = ls-files -o -i --exclude-standard
  unpushed = "log --branches --not --remotes --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
  sig = !git ls-files -v | grep "^[[:lower:]]"

  ig = update-index --assume-unchanged
  uig = update-index --no-assume-unchanged
  ignore = update-index --assume-unchanged
  ignored = !git sig

  gitignore-untracked = !git gitignore `git untracked`
  ig-untracked = !git ignore `git untracked`
  gitignore = !cd `git root` && touch .gitignore

  head = !git l -1
  h = !git head
  r = !git l -20
  ra = !git r --all

  sh = stash
  shp = stash pop
  shl = stash list
  shd = stash drop
  shc = stash clear
  sha = stash apply

  chp = cherry-pick
  chpc = cherry-pick --continue
  chpq = cherry-pick --quit
  chpa = cherry-pick --abort

  rv = revert
  rvc = revert --continue
  rva = revert --abort

  am3 = am -3
  amr = am --resolved
  amc = am --continue
  ama = am --abort
  ams = am --skip

  fm = format-patch

  rb = rebase
  rbad = rebase --committer-date-is-author-date
  rbi = rebase -i
  rbim = "!f() { git rbi $(git default-branch); }; f"
  rbtc = !git theirs `git unmerged` || git resolve-unmerged && (git rbc || git rbs)
  rboc = !git ours `git unmerged` || git reset `git unmerged` && git a . && (git rbc || git rbs)
  rbc = rebase --continue
  rba = rebase --abort
  rbs = rebase --skip
  rbm = "!f() { git rb $(git default-branch); }; f"

  squash = !"f() { NL=$1; GIT_EDITOR=\"sed -i '2,$NL s/pick/squash/;/# This is the 2nd commit message:/,$ {d}'\"; git rebase -i HEAD~$NL; }; f"
  sq = !git squash $1
  sqpsf = !git squash $1 && git psf

  bs = bisect
  bsr = bisect reset
  bsb = bisect bad
  bsg = bisect good

  current = rev-parse --abbrev-ref HEAD
  rename = "!f() { git br --move $(git current) $1; }; f"
  br = branch
  brc = rev-parse --abbrev-ref HEAD
  bra = branch -a
  brrecent = !git for-each-ref --sort=-committerdate refs/heads/
  brar = "!f() { git bra | grep remotes/$1/ | cut -f 3 -d '/'; }; f"
  brd = branch -D

  rem = remote
  rema = remote add
  remr = remote rm
  remv = remote -v
  remotes = remote -v

  bl = blame

  gcp = gc --prune=now
  gca = gc --aggressive
  gcap = gc --aggressive --prune=now

    # git change-commits GIT_COMMITTER_NAME "old name" "new name"
  change-commits = "!f() { VAR=$1; OLD=$2; NEW=$3; shift 3; git filter-branch --env-filter \"if [[ \\\"$`echo $VAR`\\\" = '$OLD' ]]; then export $VAR='$NEW'; fi\" $@; }; f "
    # from https://help.github.com/articles/remove-sensitive-data
  remove-file = "!f() { git filter-branch -f --index-filter \"git rm --cached --ignore-unmatch $1\" --prune-empty --tag-name-filter cat -- --all; }; f"

  rf = reflog
  rfe = reflog expire --expire=now --all

  pru = prune
  prm = !git rfe && git gcp

  fsize = git ls-tree -r -t -l --full-name HEAD | sort -rn -k 4 | less

  findemptydirs = !"find . -type d -empty ! -path ./tmp/\\*"
  deleteemptydirs = !"find . -type d -empty ! -path ./tmp/\\* -exec rmdir {} \\;"

[remote "origin"]
  fetch = ^refs/heads/gh-pages

[filter "lfs"]
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
